Name: lesson-scribe
Version: 0.1.0
Summary: Journal de leçons avec gestion audio et transcription.
Author-email: Kevin <kevin@example.com>
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: python-dotenv>=1.0
Requires-Dist: numpy>=1.23
Requires-Dist: sounddevice>=0.4
Provides-Extra: dev
Requires-Dist: invoke>=2.2; extra == "dev"

# Lesson Scribe

Lesson Scribe est une application de bureau Tkinter pensée pour consigner des leçons
et conserver leurs journaux, pièces audio et transcriptions. Le logiciel met l’accent
sur la simplicité : chaque entrée correspond à une leçon, avec sa date, ses horaires,
sa durée et un journal libre qui peut être enrichi automatiquement par la
transcription d’un audio.

## Structure du projet

```
.
├── pyproject.toml       # Métadonnées du projet et entrée console `lesson-scribe`
├── requirements.txt     # Dépendances minimales (audio + .env)
├── tasks.py             # Tâches Invoke pour installer et lancer l’app
└── src/
    └── lesson_scribe/
        ├── __init__.py
        ├── __main__.py  # Permet `python -m lesson_scribe`
        └── app.py       # Interface Tkinter principale
```

## Structure d’un workspace

Lesson Scribe travaille toujours dans un dossier (workspace). Chaque workspace suit
la hiérarchie suivante :

```
<workspace>/
├── metadata.json                # Métadonnées globales + index des leçons
└── lessons/
    └── <lesson_id>/
        ├── lesson.json          # Métadonnées de la leçon (date, durée, chemins)
        ├── journal.txt          # Journal libre + transcription injectée
        ├── transcript.txt       # (Optionnel) transcription brute générée par Vibe
        └── <fichiers audio>     # Audio attaché à la leçon (copié dans le workspace)
```

Lors de la création d’un workspace, sélectionnez un dossier vide (ou confirmez que
l’existant peut être écrasé). L’application générera automatiquement la structure et
sauvegardera les données à chaque autosauvegarde.

## Prérequis

* Python 3.10 ou supérieur
* Pip et un environnement virtuel (recommandé)

## Installation rapide

```bash
python -m venv .venv
source .venv/bin/activate  # Sur Windows: .venv\Scripts\activate
python -m pip install --upgrade pip
python -m pip install -r requirements.txt
pip install -e .
```

> Astuce : `invoke install --dev` installe le projet en mode editable avec les
dépendances de développement.

## Lancement de l’application

```bash
invoke run
```

Cette commande lance `python -m lesson_scribe` grâce aux tâches définies dans
`tasks.py`.

## Configuration via fichier `.env`

L’application charge automatiquement un fichier `.env` (via
[python-dotenv](https://github.com/theskumar/python-dotenv)) au démarrage. Copiez le
fichier `.env.example` fourni à la racine du dépôt, renommez-le en `.env` et
ajustez les valeurs selon votre environnement :

* `LESSON_SCRIBE_DEFAULT_WORKSPACE` (alias : `LESSON_DEFAULT_WORKSPACE`) : chemin
  vers un workspace Lesson Scribe à ouvrir automatiquement.
* `VIBE_CLI`, `VIBE_MODEL_PATH`, `VIBE_LANGUAGE`, `VIBE_THREADS`,
  `VIBE_TEMPERATURE` : paramètres optionnels pour piloter Vibe.

> Astuce : pour utiliser un autre fichier que `.env` (ex. `~/secrets/lesson.env`),
> définissez la variable d’environnement `LESSON_SCRIBE_ENV_FILE` avant de lancer
> l’application.

## Transcription audio avec Vibe (mode local)

L’application peut lancer automatiquement la transcription d’un enregistrement audio
via [Vibe](https://github.com/thewh1teagle/vibe), un binaire CLI basé sur Whisper.

### Installation de Vibe

1. Téléchargez la dernière version de Vibe et placez le binaire (`vibe`,
   `vibe.exe`, etc.) dans un dossier accessible.
2. Téléchargez un modèle Whisper au format `.bin` et indiquez son chemin via
   `VIBE_MODEL_PATH`.
3. (Optionnel) ajustez `VIBE_LANGUAGE`, `VIBE_THREADS` ou `VIBE_TEMPERATURE`
   selon votre matériel.

### Fonctionnement dans Lesson Scribe

* Lorsqu’un fichier audio est attaché à une leçon, il est copié dans le workspace
  puis un worker démarre Vibe en arrière-plan.
* La progression (0 – 100 %) est affichée dans un encart dédié avec un bouton
  « Annuler » qui interrompt proprement la transcription.
* La transcription générée est écrite dans `transcript.txt` et le texte est
  injecté dans le journal libre (`journal.txt`) sous la bannière
  `--- Transcription Vibe ---`.
* Si Vibe n’est pas configuré, l’application affiche un avertissement et laisse la
  leçon inchangée.

## Prompt d’analyse

Le bouton « Copier prompt d’analyse » rassemble toutes les leçons (journal inclus)
au format texte et les copie dans le presse-papiers. Vous pouvez ensuite coller ce
prompt dans l’outil de votre choix pour générer une synthèse ou un plan de
révision.

## Lint facultatif

Si [Ruff](https://github.com/astral-sh/ruff) est installé dans votre environnement,
vous pouvez exécuter :

```bash
invoke lint
```

La tâche affiche un message si Ruff est absent.

## Tests

Aucun test automatisé n’est fourni pour l’instant. Ajoutez vos propres tests sous
`tests/` selon vos besoins.
